#!/usr/bin/env python3
"""
Adjust Elbow Angle
Keep shoulder at 15¬∞ and adjust elbow to get arm lower
"""

import sys
import os
import time

# Add src directory to path
sys.path.append(os.path.join(os.getcwd(), 'src'))

# Fix smbus import issue
try:
    import smbus2 as smbus
    sys.modules['smbus'] = smbus
    print("‚úÖ smbus compatibility fixed")
except ImportError:
    print("‚ùå smbus2 not available")
    sys.exit(1)

# Import our modules
try:
    from Arm_Lib import Arm_Device
    print("‚úÖ Arm_Lib imported successfully")
except Exception as e:
    print(f"‚ùå Import error: {e}")
    sys.exit(1)

class ElbowAdjuster:
    def __init__(self):
        self.robot = None
        
    def initialize_robot(self):
        """Initialize the robot"""
        print("ü§ñ Initializing robot...")
        try:
            self.robot = Arm_Device()
            time.sleep(0.1)
            print("‚úÖ Robot connected")
            return True
        except Exception as e:
            print(f"‚ùå Robot initialization failed: {e}")
            return False
    
    def move_servo(self, servo_id, angle, speed=1000):
        """Move individual servo"""
        print(f"ü§ñ Moving servo {servo_id} to {angle}¬∞")
        self.robot.Arm_serial_servo_write(servo_id, angle, speed)
        time.sleep(speed/1000 + 0.5)
    
    def move_all_servos(self, angles, speed=2000):
        """Move all servos to specified angles"""
        print(f"ü§ñ Moving to: {[f'{a}¬∞' for a in angles]}")
        self.robot.Arm_serial_servo_write6(
            angles[0], angles[1], angles[2],
            angles[3], angles[4], angles[5],
            speed
        )
        time.sleep(speed/1000 + 0.5)
    
    def test_gripper(self):
        """Test gripper open/close"""
        print("ü§è Testing gripper...")
        self.robot.Arm_serial_servo_write(6, 180, 1000)  # Open
        time.sleep(1)
        self.robot.Arm_serial_servo_write(6, 30, 1000)   # Close
        time.sleep(1)
        print("‚úÖ Gripper test completed")
    
    def adjust_elbow(self):
        """Adjust elbow angle to get arm lower"""
        print("\nüéØ Adjusting Elbow Angle")
        print("=" * 40)
        print("Shoulder is set to 15¬∞ (good)")
        print("Now adjusting elbow to get arm lower")
        
        # Start with shoulder at 15¬∞ and try different elbow angles
        shoulder_angle = 15
        
        # Try different elbow angles
        elbow_angles = [90, 80, 70, 60, 50, 40, 30, 20, 10]
        
        for elbow_angle in elbow_angles:
            print(f"\nüéØ Testing elbow at {elbow_angle}¬∞")
            position = [90, shoulder_angle, elbow_angle, 90, 90, 30]
            print(f"Position: {position}")
            
            self.move_all_servos(position, 2000)
            
            response = input("Does this reach the table? (y/n/skip): ").strip().lower()
            if response == 'y':
                print(f"‚úÖ Found working position: {position}")
                self.final_position = position
                return position
            elif response == 'skip':
                print("‚è≠Ô∏è Skipping this angle")
                continue
            else:
                print("‚ùå Still too high, trying next...")
        
        print("\nüîß Manual fine-tuning mode:")
        print("Use these commands to adjust:")
        print("- '3 5' = Elbow to 5¬∞ (very low)")
        print("- '3 0' = Elbow to 0¬∞ (minimum)")
        print("- '2 10' = Shoulder to 10¬∞ (even lower)")
        print("- '2 5' = Shoulder to 5¬∞ (very low)")
        print("- 't' = Test gripper")
        print("- 'save' = Save this position")
        print("- 'done' = Finish")
        
        # Start with a low position
        current_position = [90, 10, 5, 90, 90, 30]
        self.move_all_servos(current_position, 2000)
        
        while True:
            command = input("\nEnter command: ").strip().lower()
            if command == 'done':
                break
            elif command == 't':
                self.test_gripper()
            elif command == 'save':
                # Read current positions
                current_positions = []
                for i in range(1, 7):
                    pos = self.robot.Arm_serial_servo_read(i)
                    current_positions.append(pos)
                print(f"üíæ Saved table position: {current_positions}")
                
                # Save to file
                filename = "table_height_position.py"
                with open(filename, 'w') as f:
                    f.write("# Table Height Position\n")
                    f.write("# Generated by elbow adjuster\n\n")
                    f.write(f"TABLE_HEIGHT_POSITION = {current_positions}\n")
                    f.write("\n# Servo descriptions:\n")
                    f.write("# Servo 1 (Base): Rotation\n")
                    f.write("# Servo 2 (Shoulder): Up/down movement\n")
                    f.write("# Servo 3 (Elbow): Bend\n")
                    f.write("# Servo 4 (Wrist): Rotation\n")
                    f.write("# Servo 5 (Wrist): Tilt\n")
                    f.write("# Servo 6 (Gripper): Open/close\n")
                
                print(f"üíæ Table position saved to {filename}")
                break
            elif len(command.split()) == 2:
                try:
                    servo_id = int(command.split()[0])
                    angle = int(command.split()[1])
                    if 1 <= servo_id <= 6:
                        self.move_servo(servo_id, angle, 1000)
                    else:
                        print("‚ùå Servo ID must be 1-6")
                except:
                    print("‚ùå Invalid servo command")
            else:
                print("‚ùå Invalid command")

def main():
    """Main function"""
    print("üéØ Elbow Angle Adjuster")
    print("=" * 40)
    print("Keep shoulder at 15¬∞ and adjust elbow to get arm lower")
    
    adjuster = ElbowAdjuster()
    if not adjuster.initialize_robot():
        print("‚ùå Failed to initialize robot")
        return
    
    try:
        adjuster.adjust_elbow()
    except KeyboardInterrupt:
        print("\n‚èπÔ∏è Interrupted by user")
    
    print("‚úÖ Elbow adjustment complete!")

if __name__ == "__main__":
    main() 